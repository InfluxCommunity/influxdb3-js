version: 2.1

parameters:
  default-node-image:
    type: string
    default: "cimg/node:18.19"

executors:
  docker-amd64-image:
    parameters:
      node-image:
        type: string
        default: << pipeline.parameters.default-node-image >>
    docker:
      - image: <<parameters.node-image>>
      - image: influxdb:3-core
        environment:
          - INFLUXDB3_NODE_IDENTIFIER_PREFIX=node01
          - INFLUXDB3_OBJECT_STORE=file
          - INFLUXDB3_DB_DIR=/var/lib/influxdb3/data
  docker-arm64-image:
    parameters:
      node-image:
        type: string
        default: << pipeline.parameters.default-node-image >>
    docker:
      - image: <<parameters.node-image>>
      - image: influxdb:3-core
        environment:
          - INFLUXDB3_NODE_IDENTIFIER_PREFIX=node01
          - INFLUXDB3_OBJECT_STORE=file
          - INFLUXDB3_DB_DIR=/var/lib/influxdb3/data
    resource_class: arm.medium


commands:
  init-dependencies:
    steps:
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-v2-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-v2-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
  upload-codecov-amd64:
    steps:
      - run:
          name: Collecting coverage reports
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl -s https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov
  upload-codecov-arm64:
    steps:
      - run:
          name: Collecting coverage reports
          command: |
            curl -k https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            curl -Os https://uploader.codecov.io/v0.8.0/aarch64/codecov
            curl -Os https://uploader.codecov.io/v0.8.0/aarch64/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/v0.8.0/aarch64/codecov.SHA256SUM.sig
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            sudo chmod +x codecov


jobs:
  tests:
    parameters:
      node-image:
        type: string
        default: << pipeline.parameters.default-node-image >>
      exe:
        type: executor
        default: docker-amd64-image
    executor: << parameters.exe >>
    steps:
      - checkout
      - init-dependencies
      - run:
          name: Setup InfluxDB service
          command: |
            ./scripts/influxdb-setup.sh \
              --export-url-as TESTING_INFLUXDB_URL \
              --export-db-as TESTING_INFLUXDB_DATABASE \
              --export-token-as TESTING_INFLUXDB_TOKEN
      - run:
          name: Run tests
          command: |
            yarn flight:test
            yarn build
            yarn test:ci
            yarn typedoc
      - store_test_results:
          path: ./reports

  generate-flight:
    docker:
      - image: << pipeline.parameters.default-node-image >>
    steps:
      - checkout
      - init-dependencies
      - run:
          name: Generate Flight Client
          command: |
            yarn flight
  coverage:
    parameters:
      node-image:
        type: string
        default: << pipeline.parameters.default-node-image >>
      exe:
        type: executor
        default: docker-amd64-image
    executor: << parameters.exe >>
    steps:
      - checkout
      - init-dependencies
      - run:
          name: Runs tests with coverage
          command: |
            yarn --version
            yarn flight:test
            yarn run coverage:ci
      - when:
          condition:
            equal: [ docker-amd64-image, << parameters.exe >> ]
          steps:
            - upload-codecov-amd64
      - when:
          condition:
            equal: [ docker-arm64-image, << parameters.exe >> ]
          steps:
            - upload-codecov-arm64
      - store_artifacts:
          path: ./packages/client/coverage

  deploy-preview:
    parameters:
    docker:
      - image: << pipeline.parameters.default-node-image >>
    steps:
      - run:
          name: Early return if this build is from a forked repository
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME != "InfluxCommunity" ]]; then
              echo "Nothing to do for forked repositories, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - init-dependencies
      - run:
          name: Setup npmjs
          command: bash .circleci/setup-npmjs.sh
      - run:
          name: Build & Deploy nightly version
          command: bash .circleci/deploy-nightly-version.sh

workflows:
  version: 2
  build:
    jobs:
      - tests:
          matrix:
            parameters:
              exe: [ docker-amd64-image, docker-arm64-image ]
              node-image: [ << pipeline.parameters.default-node-image >>, "cimg/node:20.9.0", "cimg/node:21.4", "cimg/node:22.12.0" ]
          filters:
            branches:
              ignore: gh-pages
      - coverage:
          matrix:
            parameters:
              exe: [ docker-amd64-image, docker-arm64-image ]
              node-image: [ << pipeline.parameters.default-node-image >> ]
          filters:
            branches:
              ignore: gh-pages
      - generate-flight:
          filters:
            branches:
              ignore: gh-pages
      - deploy-preview:
          requires:
            - tests
            - coverage
          filters:
            branches:
              only: main
